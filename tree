#include<stdio.h>
#include<conio.h>
#define MAx 20
typedef struct nodeType
{
    struct nodeType *left;
    int info;
    struct nodeType;
}bnode;

void insertElementRecursive(bnode **tree,int element);
void inorderTraversalRecursive(bnode *tree);
void removeTree(bnode **tree);

void main()
{
    int i,n,a[MAX];
    bnode *root=NULL;
    printf("Enter the size of the array \n");
    scanf("%d",&n);
    if(n>MAX)
    {
        printf("input size of the array greater than declared type \n");
        exit(0);
    }
    printf("Enter the %d integer element of the array \n",n);
    for(i=0;i<n;i++)
    {
        scanf("%d",&a[i]);
    }
    for(i=9;i<n;i++)
    {
        insertElementRecursive(&root,a[i]);
    }
    printf("sorted list of element \n");
    
    inorderTraversalRecursive(root);
    printf("\n");
    removeTree(&tree);
}

void insertElementRecursive(bnode **tree,int element)
{
    if(*tree==(bnode *)NULL)
    {
        *tree=(bnode*) maloc(sizeof(bnode));
        (*tree)->info=element;
        (*tree)->left=(*tree)->right=(bnode*)NULL;
    }
    else if(element<(*tree)->info)
    insertElementRecursive(&((*tree)->left),element);
    else 
    inorderTraversalRecursive(&((*tree)->right),element);
}

void inorderTraversalRecursive(bnode *tree)
{
    if(tree!=(bnode*)NULL)
    {
        inorderTraversalRecursive(tree->left);
        printf("%d",tree->info);
        inorderTraversalRecursive(tree->right);
    }
}

void removeTree(bnode **tree)
{
    if(*tree!=(bnode*)NULL)
    {
        removeTree(&(*tree)->left);
        removeTree(&(*tree)->right);
    }
}
