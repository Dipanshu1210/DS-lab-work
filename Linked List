// Program to illustrate the implementation of unsorted linear linked list

#include<stdio.h>
#include<stdlib.h>
#include<conio.h>
typedef struct nodetype{
int info;
struct nodetype *next;
}node;

//function prototype

void createEmptylist(node **head);
void traverseInOrder(node *head);
void traverseInRevorder(node *head);
void InsertAtBeg(node **head,int item);
void InsertAfterElement(node*head,int item,int after);
void InsertAtEnd(node **head,int item);
void DeletefromBeg(node **head);
void DeletefromEND(node **head);
void DeleteAfterElement(node *head,int after);
void AuxilliarySearch( node *head,node **ploc,node **loc,int item);
node *searchInUnsortedList(node *head,int item);
void ReverseList(node **head);
void DeleteList(node **head);

void main() 
{
node *head;
int choice,ele,after;
createEmptylist(&head);
while(1)
{
printf("        OPERATION AVAILABLE ARE        \n");
printf("***************************************\n");
printf("1. INSERT AT BEGINNING\n");
printf("2. INSERT AT END\n");
printf("3. INSERT AFTER ELEMENT\n");
printf("4. DELETE FROM BEGINNING\n");
printf("5. DELETE FROM END\n");
printf("6. DELETE AFTER ELEMENT\n");
printf("7. TRAVERSE IN ORDER\n");
printf("8. TRAVERSE IN REVERSE ORDER\n");
printf("9. REVERSE LINKED LIST\n");
printf("10. EXIT\n");
printf("ENTER choice  :- ");
scanf("%d", &choice);
if(choice==10)
{
exit(0);
}
switch(choice)
{
case 1:     printf("\n Enter Elements:\n");
	    scanf("%d", &ele);
	    InsertAtBeg(&head,ele);
	    break;
case 2:     printf("\nEnter Element:\n");
	    scanf("%d", &ele);
	    InsertAtEnd(&head,ele);
	   break;
case 3:    printf("ELEMENT is delete from beginning \n");
	   DeletefromBeg(&head);
	   break;
case 4:    printf("ELEMENT is delete from End\n");
	   DeletefromEND(&head);
	   break;
case 5: printf(" Enter the element after which you delete \n");
        scanf("%d",&after);
		DeleteAfterElement(head,after);
		break;	   
case 6: printf(" Enetr the element \n");
       scanf("%d",&ele);
       printf("Enter the element after which you insert \n");
       scanf("%d",&after);
       InsertAfterElement(head, ele, after);
       break;
	   
case 7:    if(head==NULL)
	   printf("\n LIST is EMPTY");
	   else
	  traverseInOrder(head);
	  break;
case 8: ReverseList(&head);
      break;
case 9: DeleteList(&head);
      break;
case 10:   if(head==NULL)
	  printf("\n LIST is EMPTY");
	  else
	  traverseInRevorder(head);
	  printf("\nPress any key to continue");
	  getch();
	  break;
	 }
}
}

// MAIN FUNCTION

void createEmptylist(node **head)
{
 *head=NULL;
}


void InsertAtBeg(node **head,int item)
{
 node *ptr;
 ptr=(node *)malloc(sizeof(node));
 ptr-> info=item;

 if(*head==NULL)
 ptr-> next=NULL;

 else
 ptr-> next=*head;
 *head=ptr;
}


void InsertAtEnd(node **head,int item)
{
 node *ptr,*loc;
 ptr=(node *)malloc(sizeof(node));
 ptr->info=item;
 ptr->next=NULL;
 if(*head==NULL)
 *head=ptr;
 else
 {
 loc=*head;
 while(loc->next!=NULL)
 loc=loc->next;
 loc->next=ptr;
 }
}
 

void traverseInOrder(node *head)
{
while(head!=NULL)
{
printf("\n %d", head->info);
head=head->next;
}
}
 
 
void traverseInRevorder(node *head)
{
 if(head->next!=NULL)
 {
 traverseInRevorder(head->next);
 }
 printf("\n %d",head->info);
}


void DeletefromBeg(node **head)
{
node *ptr;
if(*head==NULL)
   return;
   else
   { ptr=*head;
   *head=ptr->next;
   free(ptr);
   }
}
   
   
void DeletefromEND(node **head)
{
node *ptr,*loc;
if(*head==NULL)
   return;
   else if((*head)->next==NULL)
   {
   ptr=*head;
   *head=NULL;
   free(ptr);
   }
   else
   loc=*head;
   ptr=(*head)->next;
   while(ptr->next!=NULL)
   {
   loc=ptr;
   ptr=ptr->next;
   }
   loc->next=NULL;
   free(ptr);
}
   
   
   void InsertAfterElement(node *head,int item,int after)
   {
   node *ptr,*loc;
   loc=searchInUnsortedList(head,after);
   if(loc==(node *)NULL)
   return;
   ptr=(node *) malloc (sizeof(node));
   ptr->info=item;
   ptr->next=loc->next;
   loc->next=ptr;
}


void DeleteAfterElement(node *head,int after)
{
	node *ptr,*loc;
	//loc=searchInUnsortedList((head,after);
	if(loc==(node *) NULL)
	return;
	ptr=loc->next;
	loc->next=ptr->next;
	free(ptr);
}


void AuxilliarySearch(node *head,node **ploc,node **loc,int item)
{
	int flag=0;
	if(head==NULL)
	*ploc=*loc=NULL;
	else if(head->info==item)
	{
	*ploc=NULL;
	*loc=head;
	}
	else
	{
		*ploc=head;
		*loc=head->next;
		while((*loc!=NULL) && (!flag))
		{
			if((*loc)->info==item)
			flag=1;
			else
			{
				*ploc=*loc;
				*loc=(*loc)->next;
			}
		}
	}
}


node *searchInUnsortedList(node *head,int item)
{
	while((head!=NULL) && (head->info!=item))
	head=head->next;
	return NULL;
}


node *searchInSortedList(node *head,int item)
{
	while(head!=NULL)
	{
		if(head->info==item)
        return head;
        else if(item<head->info)
        return NULL;
        else
        head=head->next;
	}
}


void ReverseList(node **head)
{
	node *previousNode, *currentNode, *nextNode;
	currentNode=*head;
	nextNode=currentNode->next;
	previousNode=NULL;
	currentNode->next=NULL;
	while(nextNode!=NULL)
	{
		previousNode=currentNode;
		currentNode=nextNode;
		nextNode=currentNode->next;
		currentNode->next=previousNode;
	}
	*head=currentNode;
}


void DeleteList(node **head)
{
	node *ptr;
	while(*head!=NULL)
	{
		ptr=*head;
		*head=(*head)->next;
		free(ptr);
	}
}
